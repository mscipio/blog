<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Budding Scientist (python)</title><link>http://mscipio.github.io/</link><description></description><atom:link href="http://mscipio.github.io/categories/python.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Wed, 20 Apr 2016 09:58:53 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Calculating the posterior probability distribution of parameters with emcee python module</title><link>http://mscipio.github.io/posts/posterior-distribution-of-parameter-estimate.html</link><dc:creator>Michele Scipioni</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3&gt;Calculating the posterior probability distribution of parameters with &lt;strong&gt;emcee()&lt;/strong&gt; python module&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;emcee&lt;/strong&gt; can be used to obtain the posterior probability distribution of parameters, given a set of experimental data. An example problem is a double exponential decay. A small amount of Gaussian noise is also added.&lt;/p&gt;&lt;p&gt;&lt;a href="http://mscipio.github.io/posts/posterior-distribution-of-parameter-estimate.html"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>bayes</category><category>bayesian</category><category>emcee</category><category>posterior</category><category>pymc</category><category>python</category><guid>http://mscipio.github.io/posts/posterior-distribution-of-parameter-estimate.html</guid><pubDate>Wed, 20 Apr 2016 08:08:47 GMT</pubDate></item><item><title>How to read DICOM files into Python</title><link>http://mscipio.github.io/posts/read_dicom_files_in_python.html</link><dc:creator>Michele Scipioni</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3&gt;Dataset&lt;/h3&gt;
&lt;p&gt;Dataset is the main object you will work with directly. Dataset is derived from python’s dict, so it inherits (and overrides some of) the methods of dict. In other words it is a collection of key:value pairs, where the key value is the DICOM (group,element) tag (as a Tag object, described below), and the value is a DataElement instance (also described below).&lt;/p&gt;
&lt;p&gt;A dataset could be created directly, but you will usually get one by reading an existing DICOM file (it could be a .dcm or a .img file):&lt;/p&gt;&lt;p&gt;&lt;a href="http://mscipio.github.io/posts/read_dicom_files_in_python.html"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>dicom</category><category>medical imaging</category><category>python</category><guid>http://mscipio.github.io/posts/read_dicom_files_in_python.html</guid><pubDate>Tue, 19 Apr 2016 10:00:47 GMT</pubDate></item><item><title>PCA tutorial using scikit-learn python module</title><link>http://mscipio.github.io/posts/pca-tutorial-using-scikit-learn-python-module.html</link><dc:creator>Michele Scipioni</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3&gt;Dimensionality Reduction: Principal Component Analysis in-depth&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Here we'll explore Principal Component Analysis, which is an extremely useful linear dimensionality reduction technique.&lt;/p&gt;
&lt;p&gt;We'll start with our standard set of initial imports:&lt;/p&gt;&lt;p&gt;&lt;a href="http://mscipio.github.io/posts/pca-tutorial-using-scikit-learn-python-module.html"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>PCA</category><category>python</category><category>scikit-learn</category><guid>http://mscipio.github.io/posts/pca-tutorial-using-scikit-learn-python-module.html</guid><pubDate>Mon, 18 Apr 2016 11:08:47 GMT</pubDate></item></channel></rss>